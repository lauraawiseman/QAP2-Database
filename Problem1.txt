
1. Creating Tables:

Students Table:

CREATE TABLE students (
	student_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	email VARCHAR(100),
	school_enrollment_date DATE
)

SELECT * from students

Professors Table:

CREATE TABLE professors(
	professor_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	department VARCHAR(50)
)

SELECT * from professors


Courses Table:

CREATE TABLE courses(
	course_id SERIAL PRIMARY KEY,
	course_name VARCHAR(50),
	course_description VARCHAR(50),
	professor_id INTEGER,
	FOREIGN KEY (professor_id) REFERENCES professors(professor_id)
)

SELECT * from courses

Enrollments Table:

CREATE TABLE enrollments(
	student_id INTEGER,
	course_id INTEGER,
	enrollment_date DATE,
	FOREIGN KEY (student_id) REFERENCES students(student_id),
	FOREIGN KEY (course_id) REFERENCES courses(course_id),
	PRIMARY KEY(student_id, course_id)
)

SELECT * from courses

2. Insert Data:

Students: 

INSERT INTO students (first_name, last_name, email, school_enrollment_date)
VALUES 
	('Jane', 'Smith', 'jane.smith@example.com', '2024-09-06'),
	('Johnny', 'Downtown', 'john.downtown@example.com', '2024-09-08'),
	('Bob', 'Bobbson', 'bob.bobbson@example.com', '2025-01-04'),
	('Allison', 'Williams', 'allison.williams@example.com', '2025-01-06'),
	('Caley', 'Johnson', 'caley.johnson@example.com', '2025-05-01');

SELECT * from students

Professors: 

INSERT INTO professors(first_name, last_name, department)
VALUES
	('Jamie', 'Woods', 'Physics'),
	('Donna', 'White', 'English'),
	('Robert', 'Baker', 'Biology'),
	('Danielle', 'Winsor', 'Chemistry');

SELECT * from professors

Courses: 

INSERT INTO courses(course_name, course_description, professor_id)
VALUES
	('Physics 101', 'Introduction to Physics', '1'),
	('Biology 101', 'Introduction to Biology ', '2'),
	('Chemistry 101', 'Introduction to Chemistry', '4' )

SELECT * from courses


Enrollments: 

INSERT INTO enrollments(student_id, course_id, enrollment_date)
VALUES
	((SELECT student_id from students WHERE first_name='Jane'AND last_name='Smith'),(SELECT course_id from courses WHERE course_name='Physics 101'),'2024-09-06'),
	((SELECT student_id from students WHERE first_name='Johnny'AND last_name='Downtown'),(SELECT course_id from courses WHERE course_name='Biology 101'), '2024-09-08'),
	((SELECT student_id from students WHERE first_name='Bob'AND last_name='Bobbson'), (SELECT course_id from courses WHERE course_name='Chemistry 101'), '2025-01-04'),
	((SELECT student_id from students WHERE first_name='Allison'AND last_name='Williams'),(SELECT course_id from courses WHERE course_name='Physics 101'), '2025-01-06'),
	((SELECT student_id from students WHERE first_name='Caley'AND last_name='Johnson'),(SELECT course_id from courses WHERE course_name='Physics 101'), '2024-05-01');

SELECT * from enrollments
	

Tasks:

1. Write SQL Queries:

- Retrieve full names of all students enrolled in Physics 101.

SELECT CONCAT(students.first_name, ' ', students.last_name) AS full_names
FROM students
JOIN enrollments ON students.student_id = enrollments.student_id
JOIN courses ON enrollments.course_id = courses.course_id
WHERE courses.course_name='Physics 101';

- Retrieve list of all courses along with professors full names:

SELECT CONCAT(professors.first_name, ' ', professors.last_name) AS full_names, 
       courses.course_name
FROM courses
JOIN professors ON courses.professor_id = professors.professor_id;

- Retrieve all courses that have students enrolled in them:

SELECT course_name
FROM courses
WHERE course_id IN (SELECT course_id FROM enrollments);


2. Update Data:

- Update a student email:

UPDATE students
SET email = 'jane.smith@updated.com'
WHERE first_name ='Jane' AND last_name='Smith';


3. Delete Data: 

DELETE FROM enrollments
WHERE student_id = 2 AND course_id=2


